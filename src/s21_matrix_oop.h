#define S21_MATRIX_OOP
#ifdef S21_MATRIX_OOP

// Небходимые зависимые директивы
#include <cmath>
#include <cstring>
#include <iostream>
#include <stdexcept>

class S21Matrix {
 private:
  // Атрибуты
  int rows_, cols_;  // Сроки и столбцы
  double** matrix_;  // Указатель на то где матрица будет размещаться в памяти

  // Вспомогательные методы
  void AllocateMatrix(int rows, int cols);  // Выделяет место в памяти
  void DeallocateMatrix();  // Освобождает место в памяти
  void CopyMatrix(const S21Matrix& other);  // Копирует матрицу для другой

 public:
  S21Matrix();   // Дефолтный конструктор
  ~S21Matrix();  // Деструктор класса

 public:
  // Части обьявления класса S21Matrix
  S21Matrix(int rows, int cols);  // Конструктор с параметрами
  S21Matrix(const S21Matrix& other);  // Конструктор копирования
  S21Matrix(S21Matrix&& other) noexcept;  // Конструктор перемещения
  S21Matrix& operator=(
      S21Matrix&& other) noexcept;  // Оператор присваивания для перемещения

  // Функции для опрераций над матрицами
  // =================================================================================================================================================================>
  /**
   * @brief Сравнивает текущую матрицу с другой матрицей на равенство.
   *
   * Эта функция проверяет, равны ли текущая матрица и матрица, переданная в
   * качестве аргумента. Две матрицы считаются равными, если их размеры
   * совпадают и все соответствующие элементы матриц равны.
   *
   * @param other Ссылка на матрицу, с которой производится сравнение.
   *              Эта матрица не изменяется и передается по константной ссылке
   * для предотвращения ненужного копирования.
   *
   * @return Возвращает `true`, если матрицы равны, и `false`, если они
   * различаются. Сравнение включает проверку размеров матриц и значений всех
   * элементов.
   */
  bool EqMatrix(const S21Matrix& other) const;

  // =================================================================================================================================================================>

  /**
   * @brief Сложение текущей матрицы с другой матрицей.
   *
   * Эта функция выполняет поэлементное сложение текущей матрицы с другой
   * матрицей, переданной в качестве аргумента. Результат операции хранится в
   * текущем объекте матрицы. Предполагается, что размеры матриц совпадают, и
   * обе матрицы имеют одинаковое количество строк и столбцов. Если размеры
   * матриц не совпадают, может произойти ошибка.
   *
   * @param other Ссылка на объект матрицы, с которой будет производиться
   * сложение. Эта матрица не изменяется и передаётся по константной ссылке для
   *              предотвращения ненужного копирования.
   *
   * @throws std::invalid_argument Если размеры матриц не совпадают.
   */
  void SumMatrix(const S21Matrix& other);
  // =================================================================================================================================================================>
  /**
   * @brief Вычитает одну матрицу из другой.
   *
   * Эта функция выполняет поэлементное вычитание матрицы `other` из текущей
   * матрицы. Результат операции хранится в текущем объекте матрицы.
   * Предполагается, что размеры матриц совпадают, и обе матрицы имеют
   * одинаковое количество строк и столбцов. Если размеры матриц не совпадают,
   * может произойти ошибка.
   *
   * @param other Ссылка на объект матрицы, из которой будет производиться
   * вычитание. Эта матрица не изменяется и передаётся по константной ссылке для
   *              предотвращения ненужного копирования.
   *
   * @throws std::invalid_argument Если размеры матриц не совпадают.
   */
  void SubMatrix(const S21Matrix& other);
  // =================================================================================================================================================================>
  /**
   * @brief Умножает все элементы матрицы на заданное число.
   *
   * Эта функция умножает каждый элемент матрицы на переданное значение.
   * Функция предназначена для использования в классе, который представляет
   * матрицу и предоставляет доступ к её элементам.
   *
   * @param num Значение типа double, на которое будут умножены все элементы
   * матрицы.
   *
   * @note Функция не возвращает результат. Внутренние значения матрицы
   * изменяются напрямую.
   */
  void MulNumber(const double num);
  // =================================================================================================================================================================>
  /**
   * @brief Умножает текущую матрицу на указанную матрицу.
   *
   * Выполняет поэлементное умножение матрицы `other` на текущую матрицу и
   * обновляет текущую матрицу результатом умножения. Для корректного выполнения
   * умножения количество столбцов в текущей матрице должно совпадать с
   * количеством строк в матрице `other`.
   *
   * @param other Матрица, на которую будет произведено умножение текущей
   * матрицы.
   *
   * @throws std::invalid_argument Если количество столбцов в текущей матрице не
   *         совпадает с количеством строк в матрице `other`.
   */
  void MulMatrix(const S21Matrix& other);
  // =================================================================================================================================================================>
  /**
   * @brief Транспонирует текущую матрицу.
   *
   * Функция создает и возвращает новую матрицу, которая является
   * транспонированной версией текущей матрицы. Транспонирование матрицы
   * означает замену её строк на столбцы и наоборот.
   *
   * @return Возвращает объект типа S21Matrix, который является
   * транспонированной версией текущей матрицы.
   *
   * @note Функция является константной и не изменяет состояние текущего
   * объекта.
   */
  S21Matrix Transpose() const;
  // =================================================================================================================================================================>
  /**
   * @brief Вычисляет определитель текущей матрицы.
   *
   * Определитель матрицы представляет собой скаляр, который характеризует
   * некоторые свойства матрицы, такие как её возможность быть обратимой.
   * Функция вычисляет определитель только для квадратных матриц.
   *
   * @return Определитель матрицы. Если матрица не является квадратной, функция
   * может выбросить исключение или вернуть специальное значение (например,
   * NaN), чтобы указать на ошибку.
   *
   * @throws std::invalid_argument Если матрица не является квадратной.
   */
  double Determinant() const;
  // =================================================================================================================================================================>
  /**
   * @brief Вычисляет минор матрицы при удалении заданной строки и столбца.
   *
   * Минор матрицы получается путём удаления указанной строки и столбца из
   * текущей матрицы и вычисления определителя полученной подматрицы.
   *
   * @param row Индекс строки, которую необходимо удалить.
   * @param col Индекс столбца, который необходимо удалить.
   *
   * @return Возвращает объект типа S21Matrix, представляющий минор исходной
   * матрицы.
   *
   */
  S21Matrix Minor(int row, int col) const;
  // =================================================================================================================================================================>
  /**
   * @brief Вычисляет матрицу алгебраических дополнений.
   *
   * Матрица алгебраических дополнений — это матрица, в которой каждый элемент
   * является алгебраическим дополнением соответствующего элемента исходной
   * матрицы. Алгебраическое дополнение элемента матрицы рассчитывается как
   * минор этого элемента, умноженный на (-1)^(i+j), где i и j — индексы
   * элемента в матрице.
   *
   * @return Возвращает объект типа S21Matrix, представляющий матрицу
   * алгебраических дополнений исходной матрицы.
   *
   * @throws std::invalid_argument Если матрица не является квадратной.
   */
  S21Matrix CalcComplements() const;
  // =================================================================================================================================================================>
  /**
   * @brief Вычисляет обратную матрицу.
   *
   * Обратная матрица существует только для квадратных матриц с ненулевым
   * определителем. Функция возвращает обратную матрицу текущей матрицы. Если
   * определитель равен нулю, функция может выбросить исключение, указывающее на
   * то, что матрица необратима.
   *
   * @return Возвращает объект типа S21Matrix, представляющий обратную матрицу
   * исходной матрицы.
   *
   * @throws std::invalid_argument Если матрица не является квадратной.
   */
  S21Matrix InverseMatrix() const;
  // =================================================================================================================================================================>

  // Операторы перегрузки
  S21Matrix& operator+=(const S21Matrix& B);
  S21Matrix& operator-=(const S21Matrix& B);
  S21Matrix& operator*=(const S21Matrix& B);
  S21Matrix& operator*=(double B);

  S21Matrix operator+(const S21Matrix& B) const;
  S21Matrix operator-(const S21Matrix& B) const;
  S21Matrix operator*(const S21Matrix& B) const;
  S21Matrix operator*(double B) const;

  bool operator==(const S21Matrix& B) const;
  bool operator!=(const S21Matrix& B) const;
  double& operator()(int i, int j);
  const double& operator()(int i, int j) const;

  // Методы доступа к размеру матрицы
  int GetRows() const;
  int GetCols() const;
  double** GetMatrixPointer() const;

  void SetElement(int rows, int cols, double number);
  double GetElement(int rows, int cols) const;
};

#endif  // S21_MATRIX_OOP
